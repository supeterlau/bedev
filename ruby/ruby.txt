WIP:

https://www.tutorialspoint.com/ruby/ruby_overview.htm

Ch1 Overview

Ruby is a pure object-oriented programming language

1993 by Yukihiro Matsumoto

Ruby is "A Programmer's Best Friend".

Features

  open-source
  general-purpose, interpreted  PL
  true object-oriented PL
  server-side scripting language
  can write Common Gateway Interface (CGI)
  can embedded into Hypetext Markup Language (HTML)
  clean and easy syntax
  similar syntax to C++ Perl
  scalable
  developing Internet and intrannet applicatioins
  can be installed in Windows and POSIX environments
  support GUI tools (Tcl/Tk GTK OpenGL)
  easily connect to DB2 MySQL Oracle etc.
  rich set of built-in functions

Ch2 本地环境搭建

asdf

Ch3 Syntax

#!/usr/bin/ruby -w

puts "Hello, Awesome Ruby";

-w : 开启 warnings

每行末尾自动 interprets semicolons (;) 和 换行符作为语句 statement 结尾

但是遇到 操作符 + - 或 backslash 时，表示语句将继续

Ruby 标识符。 case sensitive

Ram RAM 是不同的标识符

保留字 Reserved Words

BEGIN 程序启动执行的语句
next
then
elsif
undef
ensure
redo
until
rescue
retry
__FILE__
__LINE__

Here Document 可以输入多行文本

print <<EOF
...
EOF

print <<"EOF";
...
EOF

print << `EOC`
echo Hello
EOC

print <<"foo", <<"bar"
I said foo.
foo
I said bar.
bar

BEGIN 语句

BEGIN {
  run code
}

在运行程序前执行的代码

END 语句

END {

}

在程序结束执行的语句

注释 #

多行注释

=begin
comments
=end

Ch4 Classes 和 Objects

Local Variables 本地变量
  定义在函数内的
  小写字母或 _ 开头

Instance Variables
  实例或对象内部可用
  @ 开头

Class Variables
  类变量
  @@ 开头

Global Variables
  全局变量
  $ 开头

创建对象 new 方法

cust1 = Customer.new

自定义构造函数

new 方法可以有参数用来初始化对象

需要声明 initialize 方法

def initialize(id, name, addr)
end

实例方法

def some_function
  statement1
  statement2
end

Ch5 Variables Constants Literals

变量 常量 字面量

全局变量 $global_variabl = 10

实例变量 @customer_id

类变量 @@number_of_customers

局部变量 lowercase letter 或 _ 开头

常量 uppercase letter 开头

  类或模块内部定义的可以在这个类或模块内访问

  外部的可以在全局访问

  不在方法内定义。使用未初始化常量会报错，对常量赋值会产生 warning

Pseudo-Variables

  类似 局部变量，但行为像常量

  self true false nil __FILE__ __LINE__

字面量

  整数
    -2^30 2^30-1
    -2^62 2^62-1
    范围内属于 Fixnum
    范围外属于 Bignum

    进制 0 octal 0x hex 0b binary
      0377
      0xff
      0b1011
    下划线被 ignored 1_000_000
    ?a 获取 a 的 character code
    ?\n

  浮点数 Float
    123.5
    1.0e6
    4E20

  字符串 String
    双引号允许 内插 和转义
    单引号只允许 \\ 和 \'

  数组
    ["fred", 10, 3e20, "last element",] 末尾逗号可以省略

  哈希
    colors = {"red" => 0xf00, "green" => 0x0f0, "blue" => 0x00f}

  Range 区间
    (1..5) 包含 1 5
    (1...5) 包含 1

Ch6 Operators

数值运算

+ - * / % ** (2**3=8)

比较

== != > < >= <=

<=> 组合比较符 0 表示相等; 1 表示 operand 大于 second；-1 表示 operand 小于 second

===  (1...10) === 5 返回 true

.eql? 同样类型，同样值 1 == 1.0 1.eql(1.0) false

equal? 同样 object id

  aObj == bObj -> true
  aObj.equal? bObj -> false
  aObj.equal? aObj -> true

赋值操作符

+= ... **=

并行赋值

a, b, c = 10, 20, 30

位运算

& AND
| OR
^ XOR
~ binary 取反
<<
>>

逻辑运算

and
or
&&
||
!
not

三元

? :

区间

..

...

defined? 运算符

测试表达式是否定义。如果定义则返回描述字符串

Dot 和 Double Colon

:: 访问 类或模块内的 常量 实例 方法

Ch7 comments

Ch8 if...else case unless

8.1 if

if condition [then]
  code
elsif condition [then]
  code
else
  code
end

then 可以省略

简短形式

do_something if condition

8.2 unless (if not)

unless condition
  code
else
  code
end

简短形式

do_something unless condition

8.3 case

case expression
  when expression1, expression2 [then]
    code
  else
    code
end

case 后的 expression 与 when 里的 express 用 === 做比较
如果与任意一个 expression === 比较结果为 true 则执行 code

(1..5) ===  1
=> true

Ch9 Loops

9.1 while

while condition [do]
  code
end

do 可以省略

分隔符 do 或 newline 或 backslash \ 或 semicolon ;

modifier 形式

code while condition

begin
  code
end while condition

9.2 until

until condition [do]
  code
end

codition 为 false 时执行 code

其他类似 while

9.3 for

对 expression 中元素，执行一次代码

for v1, v2, ... in expression [do]
  code
end

for i in 0..5
  puts "Value of local variable is #i"
end

几乎等价于

(expression).each do |v1,v2,v3...|
  code
end

9.4 break

终止最内层循环

9.5 next

跳到下一次循环

9.6 redo

重启最内层循环，不检查 loop codition

如果在 block 内部，重启 yield 或 call

? 9.7 retry

如果在 rescue 语句中

  从 begin 处重启

如果在 iterator block 或 for 表达式中，重启 iterator，重新计算 iterater 参数

for i in 1..5
  retry if i == 3  # 从 i == 1 重启
end

Ch10 Methods

方法名 小写字母开头

def method_name(arg = default, *arg, &expr)
  expr
end

调用

method_name

method_name var1, var2

10.2 返回值

每个方法都有返回值。即最后一个语句

def test
  i = 100
  j = 10
  k = 0
end

最后返回 k 即 0

10.3 return

用于在方法中返回一个或多个值

多个值以数组形式返回，无 expression 返回 nil

10.4 可变参数

def method_name(*args)
  ...
end

10.5 类方法

类外部的方法被标记为 private

类内部方法默认为 public

使用类实例方法要先初始化实例，使用类方法不需要初始化

class SomeClass
  def test
  end

  def SomeClass.test
  end
end

10.6 alias

给 methods 或 全局变量别名。不能在方法体内使用

别名保存方法当前定义，即使方法被重写也不改变

禁止给数字全局变量设置别名，重写内置全局变量会导致严重问题

10.7 undef

取消方法定义，不能在方法内部使用

undef bar

Ch 11 Block

可以给 block 命名

在 {} 内

用 block 同名方法 调用

yield 调用

11.1 Syntax

block_name {
  statement1
  statement2
}

def run
  yield
  yield 3
end

run { |arg| puts "#{arg}" }

yield a, b

{|a, b| puts "#{a} #{b}"}

如果方法最后一个参数是 &block，就可以传一个 block 给方法，赋值给最后一个参数。同时有 * 和 &，& 在后

def test(&block)
  block.call
end

11.2 BEGIN END block

BEGIN {}

END {

}

Ch 12 Modules and Mixins 模块和混合

模块用于封装 方法 类 常量

提供命名空间，

提供mixin 功能

12.1 语法

module Identifier
end

模块名 首字母大写 和 class 一样

调用方法，获取模块常量

ModuleName::method

ModuleName::PI

12.2 require 语句

导入模块文件

require "some_module.rb"

require_relative "some_module"

push 元素到数组

[1,23] << 4
[1,23].push 4

12.3 include 语句

将模块嵌入 class，被嵌入的模块需要先 require 导入

require './some.rb'

class Decade
  include Week
end

12.4 Mixins

module Week
  def some_mixin
  end
end

只有 def Week.some_mixin 可以通过 Week::some_mixin 访问

Ch 13 Strings

sequence of one or more bytes

'simplest string literals'

'escape single quote \''

'escape backslash \\'

13.1 表达式内插 substitution

双引号内有效

13.2 通用分隔字符

%(words) %{words} %<words> %!words! 等同于 "words"

13.3 字符编码

Ruby 默认编码是 ASCII

$KCODE = 'u' 设置文件编码为 UTF-8

a ASCII
e EUC
n None(ASCII)
u UTF-8

13.4 字符串方法

创建字符串对象

String.new("String Content")

常用方法

str % arg

  arg 为 value 或 array

str * integer

  integer times str

str + other_str

  连接字符串

str << obj

  连接对象到字符串 调用对象 to_s

str.capitalize
str.capitalize!

str.casecmp case-insensitive 比较 返回 0 或 1

str.chomp 删除 record separator \n

str.chop 删除最后一个字符

str.concat 连接

str.count(str, ...)

str.crypt(other_str)  salt 两字符 a-zA-Z0-9 . /

  one-way cryptographic

str.delete(other_str)

str.downcase

str.dump all special characters escaped

str.each

str.each_byte

str.each_line {|substr| block}

str.empty? (str.length == 0)

str[fixnum] = fixnum | new_str
str[range] = fixnum | new_str 类似 slice

str.gsub() 全局替换
str.gsub!()

str.hash

str.hex

str.include? str | fixnum

str.insert(index, other_str)

str.intern
str.to_sym

str.reverse
str.reverse! in place reverse

str.index(substring/fixnum/regexp) fixnum 即 character
str.rindex(substring/fixnum/regexp) fixnum 即 character

str.ljust(integer, padstr="")
str.rjust(integer, padstr="")

str.slice(fixnum, fixnum)
str.slice(range)
str.slice!

str.sub(pattern, replacement) 普通字符串
str.sub(pattern) {|match| block} 正则模式

str.lstrip
str.lstrip!

str.rstrip
str.rstrip!

str.strip
str.strip!

str.next

str.succ

str.swapcase

str.upcase

str.unpack(format)

Ch 14 Arrays 数组

索引可以为正数或负数或 0

Ruby 的数组在添加元素时，自动扩容

14.1 创建

Array.new 20 (size 20)

array.size

array.length

Array.new 4, "MAC"

4 times "MAC"

Array.new(size) { block }

Array.[](1,2,3,4)

Array[1,2,3,4]

Array(0..9)

14.2 Build-in Methods

array & other_array

  返回交集，无重复

array * int | array * str

  int 重复次数

  str join 参数

array + other_array

array - other_array

  返回 array 独有元素

array | other_array

  并集 去重

array[index]
array[start, length]
array[range]
array.slice(start, length)
array.slice(index)
array.slice(range)

  返回位置处或范围内 subarray

array[index] = obj
array[start, length] = obj | array | nil
array[range] = obj | array | nil

  替换位置上或区间内容 nil 表示删除

array.at(index)

array.clear 清空数组

array.collect array.map {|item| block}

array.map! {|item| block}

array.compact

  移除全部 nil 返回拷贝

array.compact!

  无变化返回 nil

array.concat

array.delete(obj) {block}

  未找到 obj 执行 block

array.delete_at

  超出范围返回 nil

array.delete_if {|item| block}

  删除 block 为 true 的 item

array.each

array.each_index

  返回 index 为 block 参数

array.first
array.first(n)

  返回前 n 个元素

array.pop

array.push

array.reject

  filter 反面

array.reverse_each

  倒序遍历

array.shift

  删除第一个元素

array.unshift

  添加元素到 数组前部

array.values_at

array.zip

array.zip(arg, ...) {|arr| block}

array.rotate

array.zip(other_array).count {|a, b| a == b}


14.3 数组 pack 指令

Ch 15 Hash

15.1 create hash

Hash.new

默认值

some_hash = Hash.new("Default")

some_hash[0] == "Default"

Hash["a"=>:a, "b"=>:b]

字面量

map = {a: 1, b: 2} 等价 {:a => 1, :b => 2}
=> {:a=>1, :b=>2}

任意 Ruby object 可以做 key 或 value

15.2 内置方法

hash == other_hash

hash[key]

hash[key] = value

hash.clear

hash.default

hash.default_proc

  如果 block 创建的 hash 返回一个 block

hash.delete

  根据 key 删除 key-value pair

hash.delete_if

  key value block 求值为 true 则删除对应 pair

hash.fetch(key, default)
hahs.fetch(key) {|key| block}

hash.has_key? include? key? member?

hash.has_value?

hash.index => hash.key

  not found -> nil

hash.indexes(keys)

hash.inspect

hash.invert

hash.keys

hash.length

hash.merge(other_hash) {|key, old, new| block}

hash.shift

  移除 pair 返回两元素数组

hash.sort

  转为二维数组，sort

hash.store(key, value)

hash.update {|key, old, new| block}

hash.value?

hahs.values

hash.values_at(key1, key2, key3...)

Ch 16 Date & Time

16.1 current Date Time

Time.new.inspect

Time.now inspect

16.2 Components

time.year
    .month
    .day
    .wday Day of week
    .yday Day of year
    .hour
    .min
    .sec
    .usec
    .zone timezone name

16.3 format date in a standard format

Time.local(2020, 8, 10)

Time.utc(2020, 8, 10) 等效与 Time.gm()

Time.new.to_a (to array)

values = [sec,min,hour,day,month,year,wday,yday,isdst,zone]

Time.utc(*values)

get timestamp: Time.now.to_i

timestamp to Time Object: Time.at(time)

包含 microseconds: Time.now.to_f

16.4 Timezones & Daylight Savings Time

time = Time.new

time.zone
    .utc_offset
    .isdst
    .utc?
    .localtime
    .gmtime
    .getlocal
    .getutc

16.5 format

time.to_s
time.ctime
time.localtime
time.strftime("%Y-%m-%d %H:%M:%S")

16.6

now - 10 : 10 seconds ago

Ch 17 range

17.1 ranges as sequences

用 range 表示 sequence

(1..5) -> 1,2,3,4,5
(1...5) -> 1,2,3,4
('a'..'d') -> 'a','b','c','d'

(1..10).to_a
('bar'..'bat').to_a

17.2 作为 conditions

while gets
  print if /start/../end/
end

case score
  when 0..40 then code
  else code
end

17.3 作为 interval test

(1..10) === 5 (1..10).includes 5

Ch 18 Iterators

array hash 都属于 iterators / collections

collect 不适合用于 copy array，应该用 clone

each 返回原值

collect 返回处理后的值 map

Ch 19 File I/O

19.1 puts

add a new line at end

19.2 putc

每次输出一个 character

putc "Hello"

19.3 print

19.4 Files

some_file = File.new("filename", "mode")

some_file.close()

mode:

r Read-only, 文件指针在文件开头

r+ Read-write, 文件指针同上

w Write-only 覆盖原有内容，文件不存在会新建

w+ Read-write 覆盖原有内容

a Write-only 文件指针在文件末尾 append mode，会新建文件

a+ Read-write

some_file.sysread(20)

some_file.syswrite("12345")

some_file.each_byte {|ch| putc ch; putc ?.}

IO.readlines(some_file) 返回 array

IO.foreach(some_file) {|line| puts line}

File.rename(old_name, new_name)

File.delete(some_name)

some_file.chmod(0755)

File.open("file_name", "mode") do |some_file|
  # process
end

File::exists? some_file

File.file? some_file

File::directory? some_dir

File.readable?
File.writable?
File.executable?

File.zero?
File.size? some_file

File::ftype some_file

File::ctime mtime atime

文件夹操作

Dir.chdir(some_dir)

Dir.pwd

Dir.entries(some_dir).join ' '

Dir.foreach(some_dir) do |entry|
  puts entry
end

更简洁方法 Dir[some_dir/*]

Dir.mkdir(some_dir)

Dir.delete(some_dir)

临时文件 文件夹

require 'tmpdir'

File.join

Dir.tmpdir 平台无关临时文件夹

f = Tempfile.new(tmp_file_name)
f.path

Ch 20 Exeptions

20.1

begin
  ...
rescue TypeOfException
  ...
  retry
    从头执行 begin
rescue TypeOfException
  ...
else
  ...
ensure 无论任何情况都执行
  ...
end

20.2 raise 语句

使用 raise 抛出错误

raise

raise TypeOfException, "Error Message" condition
  condition 例如 if / unless

rescue Exception => e

e.message
e.backtrace.inspect

20.3 else

当代码中没有 exception 时执行

20.4 catch throw

catch 定义命令代码块。正常执行直到抛出错误

throw :lablename condition

catch :labelname do
end

205 Exception

Top Level: Exception

Next Level:

Interrupt

NoMeoryError

SignalException

ScriptError

StandardError

SystemExit

Fatal (只在 Ruby 解释器内部使用)

自定义错误

class FileSaveError < StandardError

end

Ch 21 OOP

21.1 类定义

class Box
  body
end

box1 = Box.new
box2 = Box.new

初始化方法

class Box
  def initialize(w, h)
    @width, @height = w, h
  end
end

实例变量 @width @height

accessor 方法 和 setter getter

def setWidth=(value)
  @width=value
end

实例方法

def getArea
  @width * @height
end

类方法，必须由类调用

def self.printCount
  @@count
end

to_s 方法 返回表示对象的信息

def to_s
  "(w:#@width;h:#@height)"
end

21.2 访问控制 Access Control

除了 initialize 外 默认是 public

Private 只有类方法可以访问

Protected 类和子类可以方法

22.3 类继承

class BigBox < Box

end

重载方法

  覆盖父类同名方法

重载操作符

  def +(otherBox)
    Box.new(@width+oter.width, @height+other.height)
  end

  def -@
    # 定义 unary - 操作符 一元操作符
  end

Object Freeze: turn an object into a constant

box.freeze 无法修改实例变量

box.frozen? 检查是否为 Freezing Object

类常量 类内部的常量 习惯上大写

    内部直接访问

    外部 classname::constant

用 allocate 创建 Object

  创建一个未初始化的实例

直接在 类定义内写可执行代码

Ch 22 Regular Expression

/pattern/im

%r 分隔符支持 || <> 等

i ignores case
m multiple lines
o 执行变量内插
x 忽略 空白，允许注释
u e s n 字符 Unicode, EUC, SJIS, ASCII

sub 查找替换一次
gsub 查找替换全部

\b {} 外匹配单词边界，{} 内匹配 backspace

Ch 23 Multithreading

Thread class. lightweight efficient way to achieve concurrency.

1. 创建 Threads

Thread.new{
  # running block
}

2. Thread Lifecycle

也可以用 Thread.start 或 Thread.fork (synonyms Thread.new)

不需要 start thread，当 CPU 有可用资源时就会执行

last expression 是 thread 的值，可以通过 t.value 来获取

t.value 会 block 到 thread 运行完成

Thread.current 返回当前 thread

Thread.main 返回主 thread

通过调用 t.join 可以等待特定 thread 完成。调用 t.join 的 thread 会等待 t 完成

3. Thread 和 Exception

如果主线程报错，Ruby interpreter 打印信息退出。其他线程报错而未处理，导致线程停止运行

如果 t 因为错误退出，那么调用 t.join 或 t.value 的线程中会抛出错误

Thread.abort_on_exception false 默认设置，未处理异常会杀死当前线程，其他的继续运行

如果为 true，就会导致 interpreter 退出

4. Thread 变量

thread 内 block 的变量是 thread 独有

Thread class 允许 thread-local 变量像 hash 一样读取

Thread.current['count'] = count

5. Thread 属性 Priorities

设置优先级 t.priority = 3

新创建线程的优先级和创建它的线程一致。主线程默认是 0

6. Thread Exclusion

两个线程访问同一处数据，线程冲突

Mutex 是实现简单信号量锁的类。即保证统一时间只有一个线程可以访问资源。其他线程等待锁释放, 或直接报错提示锁不可用。

7. 处理死锁

cv = ConditionVariable.new
mutex = Mutex.new

cv.wait(mutex) 等待资源

cv.signal 释放资源

8. 状态

state of thread

Runnable                  - run
Sleeping                  - Sleeping
Aborting                  - aborting
Terminated normally       - false
Terminated with exception - nil

9. Class Methods / Instance Methods

Ruby Plus

ch1. OOP
  https://www.rubyguides.com/ruby-tutorial/object-oriented-programming/
  https://www.rubyguides.com/2020/04/self-in-ruby/

类变量默认是 private 的

需要用 getter 或设置为 public 或用 attribute accessors

- attribute accessors 属性访问限制

attr_reader :title, :author

attr_reader 是

def author
  @author
end

的简写形式

attr_reader (read-only)
attr_writer (write-only)
attr_accessor (read & write)

- method 访问限制

private :getWidth, :getHeight


- Class Method: class-level method

def self.cook
end

- ruby 中的 self

gives you access to the current object，这个当前 object 取决于 context

context is where your code is at any given moment

self 的用途
  - 区分变量和方法
  - 定义类方法
  - 比较当前对象和其他对象
  - 用于 debug 过程
  - 用于返回值，返回 self，实现设计模式 design patterns like the Builder Design Pattern

ch2. Thread fiber
Thread
  https://www.rubyguides.com/2015/07/ruby-threads/
fiber
  https://www.rubyguides.com/2019/11/what-are-fibers-in-ruby/

- Thread

make your Ruby programs do multiple things at the same time

WARNING:

  In MRI (Matz’s Ruby Interpreter), the default way to run Ruby applications, you will only benefit from threads when running i/o bound applications. 仅在处理 i/o 密集应用时受益

  This limitation exists because of the GIL (Global Interpreter Lock).

MRI 外的实现，JRuby 或 Rubinius 能充分利用 multi-threading

  Rubinius: Rubinius is to have a Ruby interpreter written in Ruby itself (but there are still some parts written in C++).

I/O 密集应用
  api 请求
  数据库查询
  硬盘读取

线程在等待资源可用时可以暂停，切换执行其他线程。

创建线程

Thread.new { block }

block 中执行长时间任务时，需要明确指定等待程序返回: t.join 才行。

如果有多个线程，需要对每个线程调用 t.join

  threads.each(&:join)

默认线程中的异常 die silently

debug 时要设置 Thread.abort_on_exception = true

Thread Pools 如果有很多任务要处理，一次性启动上百个线程会拖垮系统，需要使用 Thread pools.

最好用 gem 完成 thread pool, 例如 celluloid gem

worker_pool    = Worker.pool(size: 5)
# If you need to collect the return values check out 'futures'
pages_to_crawl.each do |page|
   worker_pool.process_page(page)
end

concurrency-focused gems
  https://github.com/grosser/parallel
  https://github.com/chadrem/workers
  https://github.com/ruby-concurrency/concurrent-ruby

- fiber

workers, run code & keep track of their own progress

与 thread 相比，对 fiber 有更多的控制能力

例如，操作系统决定何时切换线程 （when to run threads & when to pause them）

fiber 的启动和停止是开发者决定的。

Thread 像是在后台执行的。

而 Fiber 运行时会成为 main program

f = Fiber.new { puts 1 }

执行 fiber

f.resume

Fiber.yield 停止 fiber

再次调用 f.resume 才会再启动

类似生成器，语句到执行时才运行

1. 和 loop 一起可以 实现无限序列

Fiber.new do
  loop do
  end
end

2. Async Operations : Fibers & IO

in a simple Ruby application, fibers generate 3 times less context switches than threads.

https://github.com/socketry/falcon socketry/falcon: A high-performance web server for Ruby, supporting HTTP/1, HTTP/2 and TLS.

ch3. proc lambda block
  https://www.rubyguides.com/2016/02/ruby-procs-and-lambdas/
  https://mixandgo.com/learn/ruby-blocks

  https://scoutapm.com/blog/how-to-use-lambdas-in-ruby How to Use Lambdas in Ruby | Scout APM Blog
  https://www.honeybadger.io/blog/using-lambdas-in-ruby/ Using Lambdas in Ruby - Honeybadger Developer Blog

- blocks

block 是可以传递给其他函数的 匿名函数/代码块

结构为:

{} 单行

do
  ...
end 多行

block 可以有 0 到多个参数 ，带参数形式

{ |v1, v2, v3| puts v1, v2, v3}

1-10
(1..count).each do |v1, v2, v3|
  ...
end

1...10 1-9

Blocks 可以是 明确的 explicit 或 implicit

explicit block

要求最后一个参数才能是 &block

def call_block(&block)
  block.call
end

:join Symbol
  https://stackoverflow.com/questions/4421986/how-to-check-in-ruby-if-methods-parameter-is-a-symbol How to check in Ruby if method's parameter is a symbol? - Stack Overflow
&:join -> block
&:+

call_block {puts "call explicit block"}

在方法内调用 block_given? 检测是否有 block 传入

- yield

在 yield 出现的地方调用 block

yield 可以多次使用，可以有参数（参数被传入 block 中）

- procs

- lambdas

lambda 是用特殊语法定义 block 和参数的方法

say = -> { puts "say lambda"}

这种方法，可以将 block 保存在 变量里

调用和 block 一样, say.call

- lambda vs procs

procs: Proc.new {|x| puts x}

lambda 并非 class, 而是特殊的 Proc 对象。

proc 有 lambda? 方法 some_proc.lambda?

lambda 参数必须一致，
proc 没有参数也不报错

lambda 像正常函数一样返回
proc 返回当前 current context

区别:

Lambdas are defined with -> {} and procs with Proc.new {}.

Procs return from the current method, while lambdas return from the lambda itself.
  即: lambda 的 return 终止 lambda，控制权交给调用方；proc 的 return 连调用方一起终止

Procs don’t care about the correct number of arguments, while lambdas will raise an exception.

lambda:

  add = ->(x,y) {x + y} (literal lambda operator)

  add = lambda {|x,y| x + y} (call a lambda function)

proc: add = Proc.new {|x, y| x + y}

调用都是 lambda.call proc.call

lambda 用途
  Encapsulating complicated logic
  An in-memory state machine or data pipeline
  Callbacks
  ActiveRecord scopes
  Preventing a collection from being preloaded in active admin
    (evaluate collections at run time in ActiveAdmin)
  Dynamic mapping
  A faux hash

lambda 性能问题:
  it looks like lambda functions are about 30% slower than method or function calls

As always, premature optimization is the root of all evil.

- closure

创建 proc 或 lambda 时，它捕获当前执行作用域

即 proc 中有局部变量和作用域内定义的方法

[注意]
  它们不包含值 value，而是包含引用 reference，如果变量改变，proc 总是得到最新的版本

- binding class

procs lambda 在 binding class 中存放作用域信息

create a Binding object via the binding method,

  You don’t need to use binding objects directly, but it’s still good to know this is a thing

ch4. MetaProgramming

MetaProgramming
  https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds
  https://www.rubyguides.com/2016/04/metaprogramming-in-the-wild/

metaprogramming 是写能在运行时生成代码的技术

在运行时定义方法和类，用元编程可以

  reopen and modify classes
  catch methods that don't exist, and create it on the fly
  避免重复代码

类中定义类方法和实例方法时的背后

  每个类都是类 Class 的实例，父类是 Object，更上一级父类是 BasicObject

puts Developer.class

self 指向的 object 是变化的，Ruby interpreter 执行时，会追踪 self 的值。

在 类内 (实例方法外) self 指向 类
在类方法内，self 指向类
在实例方法内，self 指向 类实例

class method 到底是什么？首先要讨论 metaclass，又叫 singleton class 和 eigen class

- metaclass

每个对象都有自己的 metaclass，无法直接看到但可以很容易使用

example = 'a string object'

def example.what
  self.upcase
end

这样给 example 对象添加 singleton method，与 class method 区别就是

  class methods 所有实例可用
  singleton method 只能用于单个实例

example 可以写成

class << example
  def what
    self.upcase
  end
end

class << self, making self equal to Developer’s metaclass.

  让 self 等于 Developer 的 metaclass

  然后在 metaclass 里定义方法

class Developer
  class << self (class << Developer)
    def backend
      "a backend developer“
    end
  end
end

backend 被添加到 Developer metaclass 上

用一点 hack 揭示 metaclass

class Object
  def meta_example
    class << self
      self
    end
  end
end

In metaclass: self = #<Class:#<Developer:0x00007fbd26016040>>

使用 Ruby 提供的 singleton_class 方法也能得到

p developer.class.singleton_class.instance_methods false

- 另一种定义方法的方式

class method 可以用 instance_eval

class Developer
end

Developer.instance_eval do
  p "instance_eval - self : " + self.to_s
  def backend
    p "inside method: " + self.to_s
  end
end

instance_eval 被求值为实例的 context，在这里是 Developer

当在对象上定义方法时，创建的不是类方法就是 singleton 方法

  例子中是 类方法，类方法是 class 的 singleton 方法；其他是对象的 singleton 方法

此外可以用 class_eval 创建实例方法

Developer.class_eval do
  p "class_eval self: " + self.to_s
  def frontend
    p 'inside method self: ' + self.to_s
  end
end

调用 class_eval，将 self 改为原 class
调用 instance_eval，self 改为原 class 的 metaclass

- 定义 missing methods (on the fly)

method_missing

当你调用对象方法时，Ruby 先看 class 的实例方法，然后在继承链上找，如果还找不到，

就调用 Kernel 的 method_missing 方法

Kernel 是所有对象都继承的类

define_method 是 Module 类的方法，可以动态定义方法

  define_method 可以接收一个 方法名 和 block 来创建方法

  define_method :some_method do |x|
    x + 2
  end

用 def 和 用 define_method 没什么区别，但 define_method 可以和 method_missing 一起写 DRY 代码。

(To be exact, you can use define_method instead of def to manipulate scopes when defining a class

define_method :frontend do |*my_arg|
  my_arg.inject(1, :*)
end

处理 method_missing

def method_missing method, *args, &block
  self.class.send(:define_method, method) do
  end
end

define_method 是私有方法，需要用 send 来调用

x.send(method, arg1, arg2, &block)

ch5. Queue

https://www.rubyguides.com/2019/10/ruby-queues/

Queue 类似 waiting list

  模拟现实的队列
  实现 Breadth-First Search BFS
  控制访问共享资源 CPU Disk

在 Ruby 实现 队列

array

  unshift (prepend)
  pop

Ruby 的 Queue 类实现 thread-safe, blocking 的队列

queue 空时，调用 queue.pop 会 block

用 queue.pop(true) 避免 block， 抛出 ThreadError: queue empty 错误

Sized Queue

queue = SizedQueue.new(5)




Pattern Design

https://refactoring.guru/design-patterns

Refactoring

https://refactoring.guru/refactoring/technical-debt

Test

ch9. Gem Rake Rack

Ruby 花活
  threads.each(&:join)
  Fiber.yield (1..count).inject(:*)
  Array.new(5) { factorial.resume }

irb
  defined? a
  => "local-variable"

Gem, Bundler
  Bundler: The best way to manage a Ruby application's gems
  https://www.rubyguides.com/2018/09/ruby-gems-gemfiles-bundler/

MRI 内部实现
  https://www.rubyguides.com/2016/02/exploring-mri/ Exploring MRI Source Code - RubyGuides

Test
  https://rollout.io/blog/unit-testing-in-ruby/
  https://semaphoreci.com/community/tutorials/getting-started-with-rspec
  https://www.rubyguides.com/2018/07/rspec-tutorial/
  https://www.rubyguides.com/2018/10/rspec-mocks/

Gem
  https://guides.rubygems.org/make-your-own-gem/

Rake
  https://www.rubyguides.com/2019/02/ruby-rake/


New Ruby Version
  https://www.rubyguides.com/2019/12/ruby-2-7-new-features/#Enumerablefilter_map

https://rubular.com/ ruby regular expression tester

Note:

Pre-defined variables
  https://ruby-doc.org/docs/ruby-doc-bundle/Manual/man-1.4/variable.html

没有 i++ 只有 i+=1

标记 deprecated
  https://rubyquicktips.com/post/20002932888/mark-deprecated-code-in-ruby

Refs:

https://www.rubyguides.com/ruby-post-index/
https://www.rubyguides.com/2017/10/array-zip-method/

https://refactoring.guru/refactoring/what-is-refactoring

Resource:

Programming.Ruby.1.9.and.2.0(4th,2013.6
  pdf
  http://ruby-doc.com/docs/ProgrammingRuby/
Metaprogramming.Ruby.2.2014.8
https://www.rubymonk.com/
http://rubylearning.com/satishtalim/tutorial.html
