
## 8. Variable Scope

https://www.tutorialspoint.com/cplusplus/cpp_variable_scope.htm Variable Scope in C++ - Tutorialspoint

可以同时有同名全局变量和局部变量

局部的会覆盖全局变量

初始值

int 0
char '\0'
float 0
double 0
pointer NULL

## 9. Constants Literals

https://www.tutorialspoint.com/cplusplus/cpp_constants_literals.htm

不改变的值

  字面量

  const 关键字

Integer Literals 

  可以是十进制 八进制 十六进制

  212
  215u = 215U (U: unsigned L: long)
  0xFeeL
  077ul

Floating-point Literals 

  必须有整数和小数部分，或整数和科学记数部分

  314159E-5L

Boolean Literals

  true 

  false

Character Literals 

  wchar_t 类型 L'x'

  值可以是 
    'Z'
    '\t'
    '\u02C0'

字符串字面量 

"hello, \

dear"

定义常量

  #include <iostream>
  using namespace std;
  #define LENGTH 10

  const type variable = value;

## 10. Constants Literals

signed
unsigned
long
short

const
volatile
restrict

## 11. Storage Classes 存储类型

auto
  局部变量的默认类型

register
  保存在寄存器的局部变量
  It should also be noted that defining 'register' does not mean that the variable will be stored in a register.

static
  局部变量在作用域外依然保持自己的值
  类变量

extern
  使用其他文件声明的全局变量

  g++ 10.cpp outer.cpp -o run

mutable
  只用在 class 里

10.cpp

## 11. 操作符

++ --
  prefix form 在其他表达式执行前修改变量
  postfix form 在其他表达式执行后修改变量

A&&B

A || B 

!(A&&B)

Binary AND: &
Binary OR: |
Binary XOR: ^
Binary Ones Complement Operator: ~
  https://stackoverflow.com/questions/791328/how-does-the-bitwise-complement-operator-tilde-work
  比特位翻转 flip
Left Shift: << 
Right Shift: >>

sizeof

Condition ? X : Y

## 12. Loop

while(condition) {
   statement(s);
}

for ( init; condition; increment ) {
   statement(s);
}

do {
   statement(s);
} 
while( condition );

goto 可用于跳出嵌套循环

## 13. Decision

https://www.tutorialspoint.com/cplusplus/cpp_decision_making.htm

if() {

} else {

}

switch(variable) {
  case Test1:
    expr;
    break;
  case Test2:
    expr;
    break;
  case Test3:
  case Test4:
    expr;
    break;
  default:
    expr;
}

switch(ch1) {
  case 'A': 
    cout << "This A is part of outer switch";
    switch(ch2) {
        case 'A':
          cout << "This A is part of inner switch";
          break;
        case 'B': // ...
    }
    break;
  case 'B': // ...
}

三元操作符 Exp1 ? Exp2 : Exp3;

## 14. Functions

return_type function_name( parameter list ) {
   body of the function
}

main 后出现的函数需要有 function definition

int max(int, int);

三种调用形式
  call by value

  call by pointer

  call by reference

https://www.geeksforgeeks.org/pointers-vs-references-cpp/

int i = 3; 

pointer 保存其他变量的地址
  内容可能改变，（保存其他同类型数据的地址）
  int *p = &i;

  可以声明初始化分开

  A pointer can be re-assigned
  A pointer has its own memory address and size on the stack

  Pointer can be assigned NULL directly, whereas reference cannot.
    因为 ref 必须现有变量才有 alias (do not run into exception situation)
  
  可以有指向指针的指针，二次转发；不能有 ref 的 ref

reference 是其他变量的别名，编译器自动进行 dereferencing
  A reference can be thought of as a constant pointer
    对应内存地址不变
  int &p = i;

  必须声明同时初始化

  a reference cannot be re-assigned, and must be assigned at initialization.
  a reference shares the same memory address (with the original variable) but also takes up some space on the stack

  The performances are exactly the same, as references are implemented internally as pointers. 

尽可能用 reference 直到必须使用 pointer (NULL-pointer, 数据结构需要改变指针时)

swap_via_r(a1, a2)

自动完成 dereferencing

void swap_via_r(int &num1, int &num2) {
  int temp;
  temp = num1;
  num1 = num2;
  num2 = temp;
}

## 15. Numbers

#include <cmath>

sin(a)
abs(a)
sqrt(a)
pow(a)
floor(a)

#include <ctime>
#include <cstdlib>

rand() 伪随机数

需要先设置 seed

// set the seed
srand( (unsigned)time( NULL ) );

## 16. Arrays

传递数组到函数

void func(int *array) {}

void func(int array[10]) {}

void func(int array[]) {}

返回数组

int * func() {}

cpp 不允许返回指针到函数外部，必须声明数组为 static
  C++ does not advocate to return the address of a local variable to outside of the function so you would have to define the local variable as static variable.

## 17. Strings
## 18. Pointers
## 19. References
## 20. Date & Time
## 21. Input/Output
## 22. Struct

## 23. Classes Objects
## 24. Inheritance
## 25. Overloading


## 10. Constants Literals

## 10. Constants Literals

引入其他模块

#include <stdio.h>

#include <iostream>


Refs:

https://stackoverflow.com/questions/11271889/global-variable-count-ambiguous
  注意避免使用 using namespace std;
