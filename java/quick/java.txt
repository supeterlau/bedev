http://tutorials.jenkov.com/java/your-first-java-app.html

01. main

java -cp classes myjavacode.MyClass

传入参数

java -cp classes myjavacode.MyClass Hello World

含有 main 函数的类是 main 类

You can have as many classes as you want in your project with a main() method in. But, the Java Virtual Machine can only be instructed to run one of them at a time. You can still call the other main() methods from inside the main() method the Java Virtual Machine executes (you haven't seen how yet) and you can also start up multiple virtual machines which each execute a single main() method.

javac src/myfirstapp/*.java -d classes

02. 核心概念

http://tutorials.jenkov.com/java/core-concepts.html

Variables

Operations
  操作变量
  控制流程
    for
    while
    if
    switch
    方法调用 Method calls

Classes + Objects

A class can have fields, constructors and methods (plus more, but that is not important now)

  Fields
    A field is a variable that belongs to a class or an object.

  Constructors
    Constructors are a special kind of method that is executed when an object of that class is created. Constructors typically initialize the objects internal fields - if necessary.

  Method

Interface
  An interface describes what methods a certain object should have available on it. A class can implement an interface.

03. 语法

http://tutorials.jenkov.com/java/syntax.html

扩展 .java

包声明

  package core.java;

导入语句

  import java.util.HashMap;

  只需要导入不再同一个包内的其他文件

04. 变量

http://tutorials.jenkov.com/java/variables.html

四种变量类型

Non-static fields

  属于 object 的变量，又称 instance variables 实例变量

Static fields

  属于 class 的变量，类变量 class variables

Local fields

  方法内的变量

Parameters

  方法参数

变量声明 type myVarName;

type 可以是

  primitive data types

    byte
    short
    char
    int
    long
    float
    double

  object types

    Byte
    Short
    Character
    Integer
    Long
    Float
    Double
    String

变量名约定
  区分大小写
  首字符 letter 或 $ 或 _
  不能是 reserved key words

Java 版本 10: local-variable type inference

  String myStr = "My String";

  可以写为

  var myStr = "My String";

var myClassObj = new MyClass();

05. 数据类型

决定变量占用内存空间大小


Primitive data types 

  boolean true/false
  byte    8bit -128 to 127
  short   16bit signed value
  char    16bit Unicode character
  int     32bit 4bytes
  long    64bit 8bytes
  float   32bit 
  double  64bit

Object references

  多个不同变量可以引用同一个 object，primitive data types 无法做到。

  Object 版本的基本类型是 immutable，但引用可以改变

Auto Boxing

  需要注意 NullPointerException 当 Object version 值为 null 时会报错。编译通过，运行时报错。

# 06. Math 

import java.lang.Math;

Math.ceil() : floating point value 到 nearest larger integer value 返回值为 doule

Math.random() : 返回 0 到 1

Math.exp()
Math.log() e
Math.log10() 10
Math.pow()
Math.sqrt()

三角函数

Math.toDegrees()

# 07. Arrays 

http://tutorials.jenkov.com/java/arrays.html

same type 元素集合

int[] intArray;

方括号位置可选
  SomeClass[] someClassArray;
  SomeClass someClassArray[];

数组初始化，大括号内是数组字面量值

int[] intArray = new int[]{1,3,5,7,9};

int[] intArray = {1,3,5,7,9};

数组长度无法改变，可以考虑使用 List java.util.ArrayList

intArray[0] = 0;

int value = intArray[0];

intArray.length;

遍历
  - for loop 
  - for-each loop

多维数组

int[][] intArray = new int[10][20];

多维数组字面量 {{1,2,3},{2,4,6}};

Arrays Class

java.util.Arrays

copy
  Arrays.copyOf()
  Arrays.copyOfRange()
  Arrays.toString()
  Arrays.sort(ints)

  java.util.Arrays.sort(employeeArray, new Comparator<Employee>() {
    @Override
    public int compare(Employee e1, Employee e2) {
        return e1.name.compareTo(e2.name);
    }
  });

  java.util.Arrays.sort(employeeArray, new Comparator<Employee>() {
    @Override
    public int compare(Employee e1, Employee e2) {
        int nameDiff = e1.name.compareTo(e2.name);
        if(nameDiff != 0) { return nameDiff; }
    
        return e1.employeeId - e2.employeeId;
    }
  });

int[] intArray = new int[10];

Arrays.fill(intArray, 123);

Arrays.binarySearch(ints, 12);
  不存在时，返回负值
    -(insertIndex) - 1

Two arrays are considered equal if the arrays have the same length, and the elements are equal to each other in the order they are found in the array. 
  Arrays.equals(ints1, ints2);

# 08. String 

http://tutorials.jenkov.com/java/strings.html

Java9 前 
  bytes, encoded as UTF-16
  2 bytes represent a single character.

Java9 后
  自动检测是否可以用单个 byte compact string.

String myString = new String("Hello World");

String myString = "Hello World";

String myString1 = "Hello World";
String myString2 = "Hello World";

两个变量指向一个 String object

objects representing Java String literals are obtained from a constant String pool which the Java virtual machine keeps internally.

String myString1 = new String("Hello World");
String myString2 = new String("Hello World");

表示明确要求指向不同的对象

多行

String text = """
              hahaha"Ding"
              gogogo
              """;

字符串拼接

字符串不可变，拼接产生第三个字符串

"AAA"+"BBB" => new StringBuilder("AAA").append("BBB").toString();

在循环多次拼接时 object creation 影响性能

改进方法是创建一次 StringBuilder
StringBuilder temp  = new StringBuilder();

str.length(); 获取字符串字符数而非字节数

String substring = string1.substring(0,5);

String string1 = "Hello World";

int index = string1.indexOf("World", (startIndex));
  not_found => -1

正则匹配
  text.matches(".*two.*");

比较字符串
  equals()
  equalsIgnoreCase()
  startsWith(value, startIndex)
  endsWith()
  a.compareTo(b)
    -1 a < b
    0 a == b
    1 a > b
  
  text.trim();

  replace() 替换全部，产生新字符串
  replaceFirst()
  replaceAll() 根据正则替换全部
  a.split(text, limit) text 是正则模式

  String intStr = String.valueOf(10);

theString.charAt(0)
byte[] bytes1 = theString.getBytes();
byte[] bytes2 = theString.getBytes(Charset.forName("UTF-8");
theString.toUpperCase();
theString.toLowerCase();

String input = "Hello %s";
input.formatted("World");

# 09. ControlFlow

if() {

} else if () {

} else {

}

switch


# 10. Loop

# 11. instanceof
http://tutorials.jenkov.com/java/instanceof.html

# 12. Classes 

http://tutorials.jenkov.com/java/classes.html


# 13. Class Fields/Methods

Access Modifier
  private 类内代码可以访问，子类无法访问
  package 默认 modifier 同一 package 内可以访问
  protected 子类可以访问
  public 任意代码可以访问

静态和非静态

static field 属于类 类变量

static String name = "";

final field

赋值后不可改变的变量

final String CONSTANT = "";
static final String CONSTANT = "";

method final Parameter

如果是对象引用，引用不能改变，但内容可以改变

声明异常

  如果方法可能抛出异常，需要在定义中声明

  public String concat(String string1, String string2) throws SomeException {

  }

Constructors

  参数和 field 同名时需要写作
    this.firstName = firstName;
  不同名可以写作
    firstName = first;

  调用其他 constructor
  public Employee(String firstName) {
    this(firstName, 50)
  }

  调用父类 constructor
    super(firstName);
  
  抛出异常 

  public Employee(String firstName) throws Exception {

  }

  try {

  } catch (Exception e) {

  }

# 14. Packages 

http://tutorials.jenkov.com/java/packages.html

written in lowercase letters

package mypackage;

同一个 package 的 class 可以直接使用

不同 package 需要先 import 

import anotherpackage.B;

http://tutorials.jenkov.com/java/access-modifiers.html

# 15. Inheritance

http://tutorials.jenkov.com/java/inheritance.html

subclass extends superclass

子类继承父类的 protected public fields 和 methods

package fields methods 只有当子类和父类位于同一个 package 才能访问

constructors 不被子类继承

Java 只支持 singular inheritance

调用父类函数 super.setLicensePlate(license);

boolean isCar = car instanceof Car;

super.setLicensePlate(license); 修改的是父类 fields 如果子类有相同名字 fields 则子类 fields 值不会改变

嵌套类会被继承，规则和 fields methods 一样

Final Classes 无法继承

public final class SomeClass {

}

Abstract Classes

# 16. Nested Classes 

http://tutorials.jenkov.com/java/nested-classes.html

静态 nested classes

public class Outer {
  public static class Nested {

  }
}

Outer.Nested instance = new Outer.Nested();

非静态 nested classes 也叫 Inner classes

public class Outer {
  public class Inner {

  }
}

创建

Outer outer = new Outer();
Outer.Inner inner = outer.new Inner();

Local classes

  method 内部的 class 

Anonymous class

  定义为子类或接口实现类


# 17. Abstract Classes

http://tutorials.jenkov.com/java/abstract-classes.html

public abstract class MyAbstractClass {

}

无法初始化
可以有 abstract 方法和 non-abstract 方法
  子类必须实现 abstract 方法 @Override

# 18. Record

http://tutorials.jenkov.com/java/record.html

Java 14 引入的特殊类

# 19. Interface

http://tutorials.jenkov.com/java/interfaces.html

有 methods 或 fields

public interface MyInterface {

    public String hello = "Hello";

    public void sayHello();
}

public class MyInterfaceImpl implements MyInterface {

    public void sayHello() {
        System.out.println(MyInterface.hello);
    }
}

必须实现所有的 interface 方法，方法签名必须一致

interface 可以作为 type 

MyInterface myInterface = new MyInterfaceImpl();

myInterface.sayHello();

允许实现多个 interface

public class MyInterfaceImpl
    implements MyInterface, MyOtherInterface {

    public void sayHello() {
        System.out.println("Hello");
    }

    public void sayGoodbye() {
        System.out.println("Goodbye");
    }
}

多个 interface 下方法签名冲突需要自行解决

interface 可以有默认实现

default Resource load(Path resourcePath) {
    // provide default implementation to load
    // resource from a Path and return the content
    // in a Resource object.
}

interface 可以继承其他 interface

多态 interface

public interface MyProducer <T>{
    
    public T produce();
    
}

# 20. Enum

http://tutorials.jenkov.com/java/enums.html

可以有 abstract method，可以实现 interface

# 08. String 



运行 Java: 
  
  sh ./compile.sh demo/Demo07.java

http://tutorials.jenkov.com/java-functional-programming/index.html

http://tutorials.jenkov.com/java-reflection/index.html

http://tutorials.jenkov.com/java-performance/index.html

http://tutorials.jenkov.com/java-collections/index.html

http://tutorials.jenkov.com/java-util-concurrent/index.html
