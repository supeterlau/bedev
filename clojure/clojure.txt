Install:
  1. asdf
  2. leiningen (lein)
    https://leiningen.org/
    https://github.com/technomancy/leiningen technomancy/leiningen: Automate Clojure projects without setting your hair on fire.

Chapter 1

https://www.braveclojure.com/getting-started/

1. Clojure

Clojure was forged in a mythic volcano by Rich Hickey

Clojure 是 Rich Hickey 在神话火山淬炼的。

用函数式语言 Lisp 和他史诗般的长发，他创造出一种赏心悦目而又强大的语言。

Lisp 的遗产给予写出比其他非 Lisp 语言更具表现力代码的能力，它来自函数式语言的清晰性能让你像程序员一样思考。

Clojure 提供更好工具来应对复杂领域，如 concurrent programming。

注意区别 Clojure Language 和 Clojure compiler。

前者是 Lisp 方言而后者是一个 JAR 文件，clojure.jar。

Clojure 是 hosted 语言，即运行在 JVM 上，依赖 JVM 核心功能提供线程和 garbage collection。

Clojure 也能编译到 JavaScript 和 Microsoft Common Language Runtime (CLR)。

JVM processes 运行 Java bytecode
Java Compiler 从 Java source code 产生 Java bytecode
JAR 是 Java bytecode 的集合
Java 程序常以 JAR 文件分发
Java 程序 clojure.jar 读取 Clojure source code 产生 Java bytecode
运行 clojure.jar 的 JVM process 执行新产生的 Java bytecode

2. Leiningen

lein

2.1 创建项目

lein new app cat_noob

项目结构是 lein 所设置的。并非 Clojure-y。

project.clj 配置 leiningen，决定依赖和启动函数

2.2 运行项目

(ns . ()) 声明 namespace

-main 程序入口

(println "") 显示文字

在项目根目录执行 lein run 运行项目

2.3 编译项目

lein uberjar -> target/uberjar/xxx/SNAPSHOT-standalone.jar

通过 java -jar /path/to/SNAPSHOT-standalone.jar 运行

2.4 REPL

lein repl

nREPL server started on port xxxx

nrepl://127.0.0.1:xxxx

cat-noob.core=> 显示位于 cat-noob.core 命名空间下

与 core.clj name 相同 ns

(-main) 执行函数

（+ 1 2 3 4） 执行加法（前缀表达式） prefix notation

（first [1 2 4 5])

概念上 REPL 类似 Secure Shell

Clojure REPL 可以和 running process 交互，甚至可以 attach 到生产环境，修改代码。

(do (println "no prompt here!")
  (+ 1 3))

Chapter 2

How to Use Emacs, an Excellent Clojure Editor

1. Using Emacs with Clojure

1.1 Fire Up Your REPL

Reads input
Evaluates it
Prints the result
Loops back to prompt

需要用 Emacs Package CIDER

install cider:

M-x package-install [RET] cider [RET]

CIDER 可以从 Emacs 里启动 REPL，提供与  REPL 交互的 key bindings

打开 clojure 文件 core.clj

M-x cider-jack-in

Emacs 的 windows 和 frames

左右两个布局叫 window

整个 GUI 窗口叫 frame

C-x C-e 运行命令 cider-eval-last-expression

C-u C-x C-e 在光标后显示求值结果

C-c M-n M-n 设置 namespace 为 buffer 中顶部列出的 namespace

namespace 避免命名冲突的机制

修改文件后编译 C-c C-k

Emacs 中 REPL 输入历史 C-<up_arrow> 或 C-Shitf-<up_arrow>

C-RET 补全括号 close parenthesis

C-c C-d C-d 显示光标下的文档

q 退出

M-. 会指向 source code。

M-, 会返回原 buffer

C-c C-d C-a 让你在函数名和文档中搜索任意文字

Emacs CIDER 中处理错误

错误存储在 *cider-error* buffer

关闭错误 C-x o 定位到窗口，q 退出错误返回 CIDER

Paredit 编辑 Lisp-style 的 paredit-mode

M-x paredit-mode toggle mode 开关

M-( Wrapping 将光标下一个 expression 放入括号


C-<left_arrow> 或 C-Shift-<left_arrow> Slurping 将右括号移到下一个 expression 右侧

C-<right_arrow> 或 C-Shift-<right_arrow> Barfing, unslurp 需要在括号内部



Note:

Emacs 启动 clojure repl 是上下布局而非左右布局

Emacs 中如何将两个 buffer 放入同一个 window

GrvaalVM

Set package download mirror in lein

Clojure version of book 1.9.0

Emacs over Vim:
  no need to switch input method
  when input view reach bottom, it will move bottom to middle
