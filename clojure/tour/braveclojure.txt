## Ch3. Crash Course

https://www.braveclojure.com/do-things/

LISP 的核心 syntax functions data

1. Syntax 

uniform structure

handful of special operators

a constant supply of parentheses

1.1 form

两种结构

  字面量 numbers strings maps vectors

  操作 opreations
    how you do things 计算的方法

valid code 被称作 form 

forms 有时也被叫做 expression

Clojure 对 form 求值  Clojure evaluates every form to produce a value.

字面量求值结果是自身

Operation 形式

  (operator operand1 operand2 ... operandn)

NOTE: Clojure 用空格分隔操作数，而不用逗号

(+ 1 2 3)

(str "aaa" "bbb" "ccc")

Clojure 操作的形式是一致的。不像 JavaScript 中，有中缀操作符，点号操作符和括号

[JavaScript]

  1+1+1

  "AAA".concat("BBB")

1.2 Control Flow

control flow 操作符 if do when 

(if boolean-form
  then-form
  optional-else-form)

if 的 form 中只能有一个，为了解决这个问题要用 do 

(if boolean-form
  (do then-form1
      then-form2)
  (do else-form1
      else-form2))

do 将多个 form 合并成一个

when 是 if 和 do 的组合，没有 else 分支

(when boolean-form
  then-form1 
  then-form2)

clojure 布尔值 true false 

nil 表示 no value，用 nil? 检查值是否为 nil

logical falsiness 逻辑假 false nil 

其他值为真值

相等符号 = (= nil nil) => true

布尔操纵符 or and 

or 返回第一个真值或最后一个值

and 返回第一个假值或最后一个真值

1.3 def 声明值

def 绑定 名字 和 值

(def city
"New York")

clojure 可以 rebind name 

类似 Elixir 与 Erlang 不同 Erlang 不允许 rebind

2. 数据结构

Clojure 数据是不可变的，即无法 原地修改数据 in-place

例如 Ruby 中可以修改数组特定位置元素，在 Clojure 中无法修改 vector 元素

(why in Ch10)

2.1 Numbers

coercion and contagion

int 3
float 4.2
ratio 1/3

2.2 Strings

只支持 "" 'Hello' 不是 valid string 

没有变量内插，支持用 str 拼接字符串

支持转义

2.3 Maps

别的语言叫 字典 或 哈希

hash maps 和 sorted maps 

先介绍 hash maps 

空 map {}

{key1 value1 key2 value2}

value 可以是任意类型

{"string-add" +}

支持嵌套

可以用 hash-map 创建 map 

(hash-map key1 value1 key2 value2)

get 用来查找 key 的 value

default 可选

(get map-form key1 [default])

get-in 可在嵌套 map 中查找 

(get-in nested-map [level1-key level2-key])

可以将 map 当作 函数来查找 key

(map-form key1)

添加元素

https://clojuredocs.org/clojure.core/conj

https://clojuredocs.org/clojure.core/assoc

(def op (conj op [:sub -] [:product *]))

2.4 Keywords

主要作为 map 的 key  

:_? 也 valid

可以像 函数一样使用来查找对应的 value 

(keyword-form map-form default)

类似

(get map-form keyword-form default)

2.5 Vectors

类似数组  0-indexed collection

元素可以是不同类型

根据索引获取元素 get 

(get vector-form index)

越界 或 负数返回 nil 

vector 函数创建

(vector 1 "a" 3.2 {})

conj 在 vector 尾部添加元素 to-the-end 

(conj vector-form other-form)

2.6 Lists

类似 vector 

无法通过 get 获取指定位置元素

list 字面量

'(1 2 3)

用 nth 替代 get 

(nth list-form index)

nth 比 get 慢
  vector 是顺序存储 计算偏移 array-like tuple_in_elixir
  list   是链式存储 全部遍历 list-like  list_in_elixir

nth 越界报错
list 函数创建

conj 添加元素到头部 to-the-head

- 使用 list 
  添加元素到 head 
  macro 中 

2.7 Sets

包含唯一元素

两种 set: hash-set sorted-set 

hast sets 用得更多

字面量 #{"ONE" 1 1.0}

创建 (hash-set "ONE" 1 1.0 1)

创建和添加时的重复项会去重

(conj #{:a :b} :b)

vector list 到 set 

(set [:a :b :c])

查看是否包含元素 

  (contains? set-form item)

  (item set-form)

  (get set-form item)

    如果 item 是 nil，get 永远返回 nil

2.8 Simplicity

还未介绍如何创建新的 type 或 class。

clojure 鼓励优先使用 build-in data structure

It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.
—Alan Perlis

Map: {:key1 "Value1" :key2 "Value2"}

Vector: [:a :b]

List: '[:a :b]

Set: #{:a :b}

3. 函数 Functions 

3.1 调用函数

(first [1 2 3 4])

(or + -)

or 返回第一个真值

#<core$_PLUS_ clojure.core$_PLUS_@76dace31> 是函数的字符串表示形式

支持 Higher-order function 的编程语言被称为支持 first-class function 

(map inc [1 3]) 注意返回值不是 Vector

函数参数先求值在进入函数计算

3.2 函数调用 宏调用 特殊形式

Special Form 

  不一定对全部运算对象求值，例如 if 

  无法作为函数参数

Macro 也有这两个特点

3.3 定义函数
匿名函数
返回函数

defn 

(defn function-name
  "docstring"
  [parameter1 param2 param3]
  (function-body))

(doc function-name) 查看 docstring 

函数支持参数重载，即对不同参数个数有不同函数分支
  arity-overloading

(defn fname
  "docstring"
  ([p1 p2 p3]
   (fbody))
  ([p1 p2]
   (fbody)))

  这也是提供默认参数的方法

(defn fname
  "docstring"
  ([p1 p2]
   (fbody))
  ([p1]
   (fname p1 "default p2 value")))

不定参数函数 variable-arity function

  用 & 表示余下参数，& 必须最后出现
(defn fname
  "docstring"
  [fix-param & variable-params]
  (fbody))

Destructuring 方便绑定集合中的值

(defn custom-first
  [[first-param]]
  (first-param))

可以和 & 共同使用

(defn custom
  [[p1 p2 & rest]]
  (fbody))

还可以用于 map 

[{v1 :key1 v2 :key2}]

[{:keys [v1 v2]}]

[{:keys [v1 v2] :as boat-location}]
  原始 map 赋值给 boat-location

支持数据类型 list, map, set, or vector

Clojure automatically returns the last form evaluated.

All Functions Are Created Equal

匿名函数

方法1: fn 

(fn [params-list]
  fbody)

((fn [] do-something) value)

可以用 def 赋值给变量 

方法2: #(* % 3)

通过 reader macro 创建 

% 是参数占位符等同于 %1, %2 表示第二个参数

余下全部参数 %&

返回函数 

(defn inc-maker
  "Create a custom incrementor"
  [inc-by]
  #(+ % inc-by))

(def inc3 (inc-maker 3))

4. 小实践

描述霍比特人 hobbit 

body parts
  relative size 

left foot 
left ear 

asym-hobbit-body-parts 左半边

a vector of maps;

[{:key1 v1 :key2 v2}]

let

let 创造新的 scope 

let 中可以使用外部作用域的变量

let form 值是最后一个 form 求值结果

into 将集合中元素添加到 vector 尾部

loop

提供另一种递归方法

recur 作用就像是 loop 创建一个匿名函数，参数为 iteration
  recur 可以调用这个匿名函数

正则

字面量 #"regular-expression"

re-find 测试模式是否能匹配

(re-find #"^left-" "left-eye")

Symmetrizer

函数式编程常用套路

列表/数组/Vector 分割为 head tail 处理 head 追加到结果尾部，继续处理余下 tail 部分

这种过程可以用 reduce 简化

(reduce + [1 2 3 5])

reduce 先处理 (+ 1 2) => 3

再处理 (+ 3 3) => 6

可以加上默认初始值

(reduce + 10 [1 2 3 4])

reduce 是对 process a collection and build a result 的抽象

Hit body 

  参数为 body model 

  先补全 body 计算各部分的值和随机值比较，确定击中位置

(let [a va b vb c vc]
  )

类似 Elixir with do end 结构

X 删除前一个字符
x 删除光标下字符


用 reduce 改进 Symmetrizer

## Ch4. Core Functions in Depth

https://www.braveclojure.com/core-functions-in-depth/

# WIP 3/13


Tips:

http://ergoemacs.org/emacs/emacs_set_default_browser.html
http://ergoemacs.org/emacs/elisp_run_current_file.html
http://ergoemacs.org/emacs/emacs_open_file_path_fast.html
https://erlang.org/doc/apps/tools/erlang_mode_chapter.html
https://stackoverflow.com/questions/3527150/open-recent-in-emacs

- history 
M-x 
open-file 
load-file 

- 切换 buffer 
http://ergoemacs.org/emacs/emacs_buffer_switching.html
c-x b

- 在 REPL 中求值 buffer 表达式
    https://github.com/clojure-emacs/cider/issues/2617
    M-x cider-insert-last-sexp-in-repl

    (println "Hello") 会输出到 repl

- indent-style 
https://github.com/clojure-emacs/clojure-mode#indentation-options
clojure-indent-style

- close buffer 
https://stackoverflow.com/questions/207510/what-is-the-key-sequence-for-closing-the-current-buffer-in-emacs

- ELisp 求值方法
https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html
M-x ielm

- 文字补全
https://emacs.stackexchange.com/questions/23840/text-completion-suggestion-in-emacs
m-/
https://stackoverflow.com/questions/4704748/emacs-completion-autocomplete-or-company
https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html

- 分割窗口后 word wrap 
https://stackoverflow.com/questions/16923341/how-do-you-get-emacs-to-word-wrap-when-screen-is-split
https://stackoverflow.com/questions/3281581/how-to-word-wrap-in-emacs

- Load file 如何输入路径

- Join Lines

- Erlang with Emacs
https://github.com/massemanet/distel
https://www.lambdacat.com/post-modern-emacs-setup-for-erlang/
https://erlang-ls.github.io/editors/emacs/

- CIDER
http://xahlee.info/clojure/clojure_emacs_cider.html
https://docs.cider.mx/cider/index.html CIDER is the Clojure(Script) Interactive Development Environment that Rocks!
https://tbellisiv.gitbooks.io/clojure-emacs-cider-intro/content/Cider_Tour/Interactive_Coding/Code_Eval.html
